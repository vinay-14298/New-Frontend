{"version":3,"sources":["components/create-todo.component.js","components/edit-todo.component.js","components/todos-list.component.js","components/delete-todo.component.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","props","onChangeTodoDescription","bind","onChangeTodoResponsible","onChangeTodoPriority","onSubmit","validateForm","cancel","state","todo_description","todo_responsible","todo_priority","todo_completed","e","this","setState","target","value","alert","preventDefault","newTodo","axios","post","then","res","console","log","data","history","push","style","marginTop","className","type","onChange","name","id","checked","class","onClick","Component","EditTodo","onChangeTodoCompleted","get","match","params","response","catch","error","obj","align","htmlFor","Todo","todo","to","_id","TodosList","todos","map","currentTodo","i","key","todoList","display","justifyContent","Delete","App","path","exact","component","DeleteTodo","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6890389b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n/*\nThis component allows us to create a new todo\n*/\nexport default class CreateTodo extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n        this.onChangeTodoResponsible = this.onChangeTodoResponsible.bind(this);\n        this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validateForm = this.validateForm.bind(this);\n        this.cancel = this.cancel.bind(this);\n\n\n        this.state = {\n            todo_description: '',\n            todo_responsible: '',\n            todo_priority: '',\n            todo_completed: false\n        }\n    }\n\n    onChangeTodoDescription(e) {\n        this.setState({\n            todo_description: e.target.value\n        });\n    }\n\n    onChangeTodoResponsible(e) {\n        this.setState({\n            todo_responsible: e.target.value\n        });\n    }\n\n    onChangeTodoPriority(e) {\n        this.setState({\n            todo_priority: e.target.value\n        });\n    }\n\n    validateForm() {\n      // ensure that a todo is not submitted with empty fields\n      var todo_description = this.state.todo_description;\n      var todo_responsible = this.state.todo_responsible;\n      var todo_priority = this.state.todo_priority;\n\n\n      if (todo_description == null || todo_description == '' ||\n      todo_responsible == null || todo_responsible == '' ||\n      todo_priority == null || todo_priority == '') {\n        alert(\"Todo fields must be filled out\");\n        return false;\n      }\n      return true;\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        if (this.validateForm()) {\n          // only submit a new todo if all fields are filled out\n\n          const newTodo = {\n            todo_description: this.state.todo_description,\n            todo_responsible: this.state.todo_responsible,\n            todo_priority: this.state.todo_priority,\n            todo_completed: this.state.todo_completed\n          };\n\n          axios.post('http://localhost:4000/todos/add', newTodo)\n          .then(res => console.log(res.data));\n\n          // after creating the todo, go to the homepage\n          this.props.history.push('/');\n        }\n      else\n      {\n        // if the todo wasn't filled out properly, reset the fields\n        this.setState({\n                 todo_description: '',\n                 todo_responsible:'',\n                 todo_priority: '',\n                 todo_completed: false\n             })\n      }\n    }\n\n    cancel() {\n      // cancel the creation of the todo and return to the homepage\n      this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: 10}}>\n                <h3>Create New Todo</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Description: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_description}\n                                onChange={this.onChangeTodoDescription}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_responsible}\n                                onChange={this.onChangeTodoResponsible}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\"\n                                    type=\"radio\"\n                                    name=\"priorityOptions\"\n                                    id=\"priorityLow\"\n                                    value=\"Low\"\n                                    checked={this.state.todo_priority==='Low'}\n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\"\n                                    type=\"radio\"\n                                    name=\"priorityOptions\"\n                                    id=\"priorityMedium\"\n                                    value=\"Medium\"\n                                    checked={this.state.todo_priority==='Medium'}\n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\"\n                                    type=\"radio\"\n                                    name=\"priorityOptions\"\n                                    id=\"priorityHigh\"\n                                    value=\"High\"\n                                    checked={this.state.todo_priority==='High'}\n                                    onChange={this.onChangeTodoPriority}\n                                    />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n                    </div>\n                    <div class=\"form-row\">\n                         <div class=\"form-group col-md-2\">\n                           <input type=\"submit\" value=\"Create Todo\" className=\"btn btn-primary\" />\n                         </div>\n                         <div class=\"form-group col-md-2\">\n                           <input type=\"button\" value=\"Cancel\" onClick={this.cancel} className=\"btn btn-primary\" />\n                         </div>\n                     </div>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n/*\nThis component allows us to edit the values of a todo\n*/\nexport default class EditTodo extends Component {\n\n  constructor(props) {\n       super(props);\n\n       this.onChangeTodoDescription = this.onChangeTodoDescription.bind(this);\n       this.onChangeTodoResponsible = this.onChangeTodoResponsible.bind(this);\n       this.onChangeTodoPriority = this.onChangeTodoPriority.bind(this);\n       this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\n       this.validateForm = this.validateForm.bind(this);\n       this.onSubmit = this.onSubmit.bind(this);\n       this.cancel = this.cancel.bind(this);\n\n       this.state = {\n           todo_description: '',\n           todo_responsible: '',\n           todo_priority: '',\n           todo_completed: false\n       }\n   }\n\n   componentDidMount() {\n      // get the todo by id from the database and list the todo parameters\n      axios.get('http://localhost:4000/todos/'+this.props.match.params.id)\n          .then(response => {\n              this.setState({\n                  todo_description: response.data.todo_description,\n                  todo_responsible: response.data.todo_responsible,\n                  todo_priority: response.data.todo_priority,\n                  todo_completed: response.data.todo_completed\n              })\n          })\n          .catch(function (error) {\n              console.log(error);\n          })\n  }\n\n  onChangeTodoDescription(e) {\n        this.setState({\n            todo_description: e.target.value\n        });\n    }\n\n    onChangeTodoResponsible(e) {\n        this.setState({\n            todo_responsible: e.target.value\n        });\n    }\n\n    onChangeTodoPriority(e) {\n        this.setState({\n            todo_priority: e.target.value\n        });\n    }\n\n    onChangeTodoCompleted(e) {\n        this.setState({\n            todo_completed: !this.state.todo_completed\n        });\n    }\n\n    validateForm() {\n      // ensure that an edited todo is not submitted with empty fields\n      var todo_description = this.state.todo_description;\n      var todo_responsible = this.state.todo_responsible;\n      var todo_priority = this.state.todo_priority;\n\n\n      if (todo_description == null || todo_description == '' ||\n      todo_responsible == null || todo_responsible == '' ||\n      todo_priority == null || todo_priority == '') {\n        alert(\"Todo fields must be filled out\");\n        return false;\n      }\n      return true;\n    }\n\n    onSubmit(e) {\n      e.preventDefault();\n      if (this.validateForm()) {\n        // only submit a todo if all fields are filled out\n        const obj = {\n          todo_description: this.state.todo_description,\n          todo_responsible: this.state.todo_responsible,\n          todo_priority: this.state.todo_priority,\n          todo_completed: this.state.todo_completed\n        };\n        console.log(obj);\n        axios.post('http://localhost:4000/todos/update/'+this.props.match.params.id, obj)\n        .then(res => console.log(res.data));\n\n        // return to the homepage after the todo is submitted\n        this.props.history.push('/');\n      }\n    }\n\n    cancel() {\n      // canel the editing of a todo and return to the homepage\n      this.props.history.push('/');\n    }\n\n  render() {\n       return (\n           <div>\n               <h3 align=\"center\">Update Todo</h3>\n               <form onSubmit={this.onSubmit}>\n                   <div className=\"form-group\">\n                       <label>Description: </label>\n                       <input  type=\"text\"\n                               className=\"form-control\"\n                               value={this.state.todo_description}\n                               onChange={this.onChangeTodoDescription}\n                               />\n                   </div>\n                   <div className=\"form-group\">\n                       <label>Responsible: </label>\n                       <input\n                               type=\"text\"\n                               className=\"form-control\"\n                               value={this.state.todo_responsible}\n                               onChange={this.onChangeTodoResponsible}\n                               />\n                   </div>\n                   <div className=\"form-group\">\n                       <div className=\"form-check form-check-inline\">\n                           <input  className=\"form-check-input\"\n                                   type=\"radio\"\n                                   name=\"priorityOptions\"\n                                   id=\"priorityLow\"\n                                   value=\"Low\"\n                                   checked={this.state.todo_priority==='Low'}\n                                   onChange={this.onChangeTodoPriority}\n                                   />\n                           <label className=\"form-check-label\">Low</label>\n                       </div>\n                       <div className=\"form-check form-check-inline\">\n                           <input  className=\"form-check-input\"\n                                   type=\"radio\"\n                                   name=\"priorityOptions\"\n                                   id=\"priorityMedium\"\n                                   value=\"Medium\"\n                                   checked={this.state.todo_priority==='Medium'}\n                                   onChange={this.onChangeTodoPriority}\n                                   />\n                           <label className=\"form-check-label\">Medium</label>\n                       </div>\n                       <div className=\"form-check form-check-inline\">\n                           <input  className=\"form-check-input\"\n                                   type=\"radio\"\n                                   name=\"priorityOptions\"\n                                   id=\"priorityHigh\"\n                                   value=\"High\"\n                                   checked={this.state.todo_priority==='High'}\n                                   onChange={this.onChangeTodoPriority}\n                                   />\n                           <label className=\"form-check-label\">High</label>\n                       </div>\n                   </div>\n                   <div className=\"form-check\">\n                       <input  className=\"form-check-input\"\n                               id=\"completedCheckbox\"\n                               type=\"checkbox\"\n                               name=\"completedCheckbox\"\n                               onChange={this.onChangeTodoCompleted}\n                               checked={this.state.todo_completed}\n                               value={this.state.todo_completed}\n                               />\n                       <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                           Completed\n                       </label>\n                   </div>\n\n                   <br />\n\n                   <div class=\"form-row\">\n                        <div class=\"form-group col-md-2\">\n                          <input type=\"submit\" value=\"Update Todo\" className=\"btn btn-primary\" />\n                        </div>\n                        <div class=\"form-group col-md-2\">\n                          <input type=\"button\" value=\"Cancel\" onClick={this.cancel} className=\"btn btn-primary\" />\n                        </div>\n                    </div>\n               </form>\n           </div>\n       )\n   }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\n/*\nThe homepage of our app. All current todos will be listed here\n*/\n\n// define a Todo\nconst Todo = props => (\n    <tr>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_description}</td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_responsible}</td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_priority}</td>\n        <td>\n            <Link to={\"/edit/\"+props.todo._id}>Edit</Link>\n        </td>\n        <td>\n            <Link to={\"/delete/\"+props.todo._id}>Delete</Link>\n        </td>\n    </tr>\n)\n\nexport default class TodosList extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {todos: []};\n  }\n\n  componentDidMount() {\n     // get a list of all todos from the database\n     axios.get('http://localhost:4000/todos/')\n         .then(response => {\n             this.setState({ todos: response.data });\n         })\n         .catch(function (error){\n             console.log(error);\n         })\n }\n\n todoList() {\n    // returns all the todos in the collection one by one\n    return this.state.todos.map(function(currentTodo, i){\n        return <Todo todo={currentTodo} key={i} />;\n    })\n}\n\n render() {\n       return (\n           <div>\n               <h3>Todos List</h3>\n               <table className=\"table table-striped\" style={{ marginTop: 20 }} >\n                   <thead>\n                       <tr>\n                           <th>Description</th>\n                           <th>Responsible</th>\n                           <th>Priority</th>\n                           <th>Update</th>\n                           <th>Remove</th>\n                       </tr>\n                   </thead>\n                   <tbody>\n                       { this.todoList() }\n                   </tbody>\n               </table>\n               <div style={{display: 'flex', justifyContent: 'center'}}>\n                  <Link to={\"/create\"}>Create Todo</Link>\n              </div>\n           </div>\n       )\n   }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n/*\nThis component allows us to delete an existing todo\n*/\nexport default class Delete extends Component {\n\n  constructor(props) {\n       super(props);\n\n       this.state = {\n           todo_description: '',\n           todo_responsible: '',\n           todo_priority: '',\n           todo_completed: false\n       }\n   }\n\n   componentDidMount() {\n     // delete todo by id and then return to the homepage\n     axios.post('http://localhost:4000/todos/delete/'+this.props.match.params.id)\n                 .then(res => console.log(res.data));\n     this.props.history.push('/');\n  }\n\n  render() {\n      return null\n    }\n }\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// import the React components\nimport CreateTodo from \"./components/create-todo.component\";\nimport EditTodo from \"./components/edit-todo.component\";\nimport TodosList from \"./components/todos-list.component\";\nimport DeleteTodo from \"./components/delete-todo.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\">MERN-Demo CRUD App</Link>\n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Todos</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n          <Route path=\"/\" exact component={TodosList} />\n          <Route path=\"/edit/:id\" component={EditTodo} />\n          <Route path=\"/create\" component={CreateTodo} />\n          <Route path=\"/delete/:id\" component={DeleteTodo} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}